/* autogenerated by Processing revision 1286 on 2022-09-25 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Comparator;
import java.util.PriorityQueue;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class camera extends PApplet {

// Created for CSCI 5611 by Liam Tyler

// WASD keys move the camera relative to its current orientation
// Arrow keys rotate the camera's orientation
// Holding shift boosts the move speed

boolean centerMode = false;

class Camera
{
  Camera()
  {
    position      = new PVector( 600, -600, 600 ); // initial position
    theta         = 0; // rotation around Y axis. Starts with forward direction as ( 0, 0, -1 )
    phi           = 0; // rotation around X axis. Starts with up direction as ( 0, 1, 0 )
    moveSpeed     = 60;
    turnSpeed     = 1.7f; // radians/sec
    boostSpeed    = 5;  // extra speed boost for when you press shift
    
    // dont need to change these
    shiftPressed = false;
    negativeMovement = new PVector( 0, 0, 0 );
    positiveMovement = new PVector( 0, 0, 0 );
    verticalMovement = new PVector( 0, 0, 0 );
    negativeTurn     = new PVector( 0, 0 ); // .x for theta, .y for phi
    positiveTurn     = new PVector( 0, 0 );
    fovy             = PI / 4;
    aspectRatio      = width / (float) height;
    nearPlane        = 0.1f;
    farPlane         = 10000;
  }
  
   public void Update(float dt)
  {
    theta += turnSpeed * ( negativeTurn.x + positiveTurn.x)*dt;
    
    // cap the rotation about the X axis to be less than 90 degrees to avoid gimble lock
    float maxAngleInRadians = 85 * PI / 180;
    phi = min( maxAngleInRadians, max( -maxAngleInRadians, phi + turnSpeed * ( negativeTurn.y + positiveTurn.y ) * dt ) );
    
    // re-orienting the angles to match the wikipedia formulas: https://en.wikipedia.org/wiki/Spherical_coordinate_system
    // except that their theta and phi are named opposite
    float t = theta + PI / 2;
    float p = phi + PI / 2;
    PVector forwardDir = new PVector( sin( p ) * cos( t ),   cos( p ),   -sin( p ) * sin ( t ) );
    PVector upDir      = new PVector( sin( phi ) * cos( t ), cos( phi ), -sin( t ) * sin( phi ) );
    PVector rightDir   = new PVector( cos( theta ), 0, -sin( theta ) );
    if (negativeMovement.mag() > 0) negativeMovement.normalize();
    if (positiveMovement.mag() > 0) positiveMovement.normalize();
    if (verticalMovement.mag() > 0) verticalMovement.normalize();

    if (shiftPressed){
      positiveMovement.mult(boostSpeed);
      negativeMovement.mult(boostSpeed);
      verticalMovement.mult(boostSpeed);
    }

    PVector velocity   = new PVector( 
      negativeMovement.x + positiveMovement.x + verticalMovement.x, 
      negativeMovement.y + positiveMovement.y + verticalMovement.y, 
      negativeMovement.z + positiveMovement.z 
    );

    position.add( PVector.mult( forwardDir, moveSpeed * velocity.z * dt ) );
    position.add( PVector.mult( upDir,      moveSpeed * velocity.y * dt ) );
    position.add( PVector.mult( rightDir,   moveSpeed * velocity.x * dt ) );
    
    aspectRatio = width / (float) height;
    perspective( fovy, aspectRatio, nearPlane, farPlane );
  
    camera( 
      position.x, position.y, position.z,
      position.x + forwardDir.x, position.y + forwardDir.y, position.z + forwardDir.z,
      upDir.x, upDir.y, upDir.z 
    );
  }
  
  // only need to change if you want difrent keys for the controls
   public void HandleKeyPressed()
  {
    if ( key == 'w' || key == 'W' ) positiveMovement.z = 1;
    if ( key == 's' || key == 'S' ) negativeMovement.z = -1;
    if ( key == 'a' || key == 'A' ) negativeMovement.x = -1;
    if ( key == 'd' || key == 'D' ) positiveMovement.x = 1;
    if ( key == 'q' || key == 'Q' ) positiveMovement.y = 1;
    if ( key == 'e' || key == 'E' ) negativeMovement.y = -1;
    if ( key == ' ' ) verticalMovement.y = -1;
    if ( key == 'R' ){
      Camera defaults = new Camera();
      position = defaults.position;
      theta = defaults.theta;
      phi = defaults.phi;
    }
    
    if ( keyCode == LEFT )  negativeTurn.x = 1;
    if ( keyCode == RIGHT ) positiveTurn.x = -0.5f;
    if ( keyCode == UP )    positiveTurn.y = 0.5f;
    if ( keyCode == DOWN )  negativeTurn.y = -1;
    if ( keyCode == CONTROL ) verticalMovement.y = 1;
    
    if ( keyCode == SHIFT ) shiftPressed = true; 
  }
  
  // only need to change if you want difrent keys for the controls
   public void HandleKeyReleased()
  {
    if ( key == 'w' || key == 'W' ) positiveMovement.z = 0;
    if ( key == 'q' || key == 'Q' ) positiveMovement.y = 0;
    if ( key == 'd' || key == 'D' ) positiveMovement.x = 0;
    if ( key == 'a' || key == 'A' ) negativeMovement.x = 0;
    if ( key == 's' || key == 'S' ) negativeMovement.z = 0;
    if ( key == 'e' || key == 'E' ) negativeMovement.y = 0;
    if ( key == ' ' ) verticalMovement.y = 0;
    if ( key == 'c' ) centerMode = true;
    if ( key == 'C' ) centerMode = false;
    
    if ( keyCode == LEFT  ) negativeTurn.x = 0;
    if ( keyCode == RIGHT ) positiveTurn.x = 0;
    if ( keyCode == UP    ) positiveTurn.y = 0;
    if ( keyCode == DOWN  ) negativeTurn.y = 0;
    if ( keyCode == CONTROL ) verticalMovement.y = 0;
    
    if ( keyCode == SHIFT ){
      shiftPressed = false;
      positiveMovement.mult(1.0f/boostSpeed);
      negativeMovement.mult(1.0f/boostSpeed);
    }
  }
  
  // only necessary to change if you want different start position, orientation, or speeds
  PVector position;
  float theta;
  float phi;
  float moveSpeed;
  float turnSpeed;
  float boostSpeed;
  
  // probably don't need / want to change any of the below variables
  float fovy;
  float aspectRatio;
  float nearPlane;
  float farPlane;  
  PVector negativeMovement;
  PVector positiveMovement;
  PVector verticalMovement;
  PVector negativeTurn;
  PVector positiveTurn;
  boolean shiftPressed;
};




// ----------- Example using Camera class -------------------- //
// Camera camera;

// void setup()
// {
//   size(600, 600, P3D);
//   camera = new Camera();
// }

// void keyPressed()
// {
//   camera.HandleKeyPressed();
// }

// void keyReleased()
// {
//   camera.HandleKeyReleased();
// }

// void draw() {
//   background(255);
//   noLights();

//   camera.Update(1.0/frameRate);
  
//   // draw six cubes surrounding the origin (front, back, left, right, top, bottom)
//   fill( 0, 0, 255 );
//   pushMatrix();
//   translate( 0, 0, -50 );
//   box( 20 );
//   popMatrix();
  
//   pushMatrix();
//   translate( 0, 0, 50 );
//   box( 20 );
//   popMatrix();
  
//   fill( 255, 0, 0 );
//   pushMatrix();
//   translate( -50, 0, 0 );
//   box( 20 );
//   popMatrix();
  
//   pushMatrix();
//   translate( 50, 0, 0 );
//   box( 20 );
//   popMatrix();
  
//   fill( 0, 255, 0 );
//   pushMatrix();
//   translate( 0, 50, 0 );
//   box( 20 );
//   popMatrix();
  
//   pushMatrix();
//   translate( 0, -50, 0 );
//   box( 20 );
//   popMatrix();
// }
//You will only be turning in this file
//Your solution will be graded based on it's runtime (smaller is better), 
//the optimality of the path you return (shorter is better), and the
//number of collisions along the path (it should be 0 in all cases).

//You must provide a function with the following prototype:
// ArrayList<Integer> planPath(Vec2 startPos, Vec2 goalPos, Vec2[] centers, float[] radii, int numObstacles, Vec2[] nodePos, int numNodes);
// Where: 
//    -startPos and goalPos are 2D start and goal positions
//    -centers and radii are arrays specifying the center and radius of obstacles
//    -numObstacles specifies the number of obstacles
//    -nodePos is an array specifying the 2D position of roadmap nodes
//    -numNodes specifies the number of nodes in the PRM
// The function should return an ArrayList of node IDs (indexes into the nodePos array).
// This should provide a collision-free chain of direct paths from the start position
// to the position of each node, and finally to the goal position.
// If there is no collision-free path between the start and goal, return an ArrayList with
// the 0'th element of "-1".

// Your code can safely make the following assumptions:
//   - The function connectNeighbors() will always be called before planPath()
//   - The variable maxNumNodes has been defined as a large static int, and it will
//     always be bigger than the numNodes variable passed into planPath()
//   - None of the positions in the nodePos array will ever be inside an obstacle
//   - The start and the goal position will never be inside an obstacle

// There are many useful functions in CollisionLibrary.pde and Vec2.pde
// which you can draw on in your implementation. Please add any additional 
// functionality you need to this file (PRM.pde) for compatabilty reasons.

// Here we provide a simple PRM implementation to get you started.
// Be warned, this version has several important limitations.
// For example, it uses BFS which will not provide the shortest path.
// Also, it (wrongly) assumes the nodes closest to the start and goal
// are the best nodes to start/end on your path on. Be sure to fix 
// these and other issues as you work on this assignment. This file is
// intended to illustrate the basic set-up for the assignmtent, don't assume 
// this example funcationality is correct and end up copying it's mistakes!).




//Here, we represent our graph structure as a neighbor list
//You can use any graph representation you like
ArrayList<Integer>[] neighbors = new ArrayList[maxNumNodes];  //A list of neighbors can can be reached from a given node
//We also want some help arrays to keep track of some information about nodes we've visited
Boolean[] visited = new Boolean[maxNumNodes]; //A list which store if a given node has been visited
int[] parent = new int[maxNumNodes]; //A list which stores the best previous node on the optimal path to reach this node
Vec2[] obstCenters;
float[] obstRadii;
int numObst;
PriorityQueue<Float>[] closed = new PriorityQueue[numNodes];
PriorityQueue<Node>[] open = new PriorityQueue[numNodes];

//Set which nodes are connected to which neighbors (graph edges) based on PRM rules
 public void connectNeighbors(Vec2[] centers, float[] radii, int numObstacles, Vec2[] nodePos, int numNodes){
  obstCenters = centers;
  obstRadii = radii;
  numObst = numObstacles;
  for (int i = 0; i < numNodes; i++){
    neighbors[i] = new ArrayList<Integer>();  //Clear neighbors list
    for (int j = 0; j < numNodes; j++){
      if (i == j) continue; //don't connect to myself 
      Vec2 dir = nodePos[j].minus(nodePos[i]).normalized();
      float distBetween = nodePos[i].distanceTo(nodePos[j]);
      hitInfo circleListCheck = rayCircleListIntersect(centers, radii, numObstacles, nodePos[i], dir, distBetween);
      if (!circleListCheck.hit){
        neighbors[i].add(j);
      }
    }
  }
}

//This is probably a bad idea and you shouldn't use it...
 public int closestNode(Vec2 start, Vec2 goal, Vec2[] nodePos, int numNodes){
  int closestID = -1;
  float minDist = 999999;
  for (int i = 0; i < numNodes; i++){
    float distToGoal = nodePos[i].distanceTo(goal);
    float dist = nodePos[i].distanceTo(start);
    float totalDist = dist + distToGoal;
    Vec2 dir = start.minus(nodePos[i]).normalized();
    hitInfo hit = rayCircleListIntersect(obstCenters, obstRadii, numObst, nodePos[i], dir, dist);
    if (totalDist < minDist && !hit.hit && neighbors[i].size() > 0){
      closestID = i;
      minDist = totalDist;
    }
  }
  return closestID;
}

 public ArrayList<Integer> planPath(Vec2 startPos, Vec2 goalPos, Vec2[] centers, float[] radii, int numObstacles, Vec2[] nodePos, int numNodes){
  ArrayList<Integer> path = new ArrayList();
  
  int startID = closestNode(startPos, goalPos, nodePos, numNodes);
  int goalID = closestNode(goalPos, startID != -1 ? nodePos[startID] : goalPos, nodePos, numNodes);
  
  path = runAStar(nodePos, numNodes, startID, goalID);
  
  return path;
}

 public ArrayList<Integer> planPath(Vec2 startPos, Vec2 goalPos, Vec2[] centers, float[] radii, int numObstacles, Vec2[] nodePos, int numNodes, int debug){
  ArrayList<Integer> path = new ArrayList();
  
  int startID = closestNode(startPos, goalPos, nodePos, numNodes);
  int goalID = closestNode(goalPos, startID != -1 ? nodePos[startID] : goalPos, nodePos, numNodes);
  
  if (debug == 2) {
    // A*
    path = runAStar(nodePos, numNodes, startID, goalID);
  } else if (debug == 1) {
    // BFS
    path = runBFS(nodePos, numNodes, startID, goalID);
  } else if (debug == 3) {
    path = runAStarNew(nodePos, numNodes, startID, goalID);
  } else {
    println("Please input a valid algorithm number.");
    path.add(0,-1);
  }
  
  return path;
}

//BFS (Breadth First Search)
 public ArrayList<Integer> runBFS(Vec2[] nodePos, int numNodes, int startID, int goalID){
  ArrayList<Integer> fringe = new ArrayList();  //New empty fringe
  ArrayList<Integer> path = new ArrayList();

  if (startID == -1 || goalID == -1) {
    path.add(0, -1);
    return path;
  }

  if (startID == goalID) {
    path.add(0, startID);
    return path;
  }

  for (int i = 0; i < numNodes; i++) { //Clear visit tags and parent pointers
    visited[i] = false;
    parent[i] = -1; //No parent yet
  }

  //println("\nBeginning Search");
  
  visited[startID] = true;
  fringe.add(startID);
  //println("Adding node", startID, "(start) to the fringe.");
  //println(" Current Fringe: ", fringe);
  
  while (fringe.size() > 0){
    int currentNode = fringe.get(0);
    fringe.remove(0);
    if (currentNode == goalID){
      //println("Goal found!");
      break;
    }
    for (int i = 0; i < neighbors[currentNode].size(); i++){
      int neighborNode = neighbors[currentNode].get(i);
      if (!visited[neighborNode]){
        visited[neighborNode] = true;
        parent[neighborNode] = currentNode;
        fringe.add(neighborNode);
        //println("Added node", neighborNode, "to the fringe.");
        //println(" Current Fringe: ", fringe);
      }
    } 
  }
  
  if (fringe.size() == 0){
    //println("No Path");
    path.add(0,-1);
    return path;
  }
    
  //print("\nReverse path: ");
  int prevNode = parent[goalID];
  path.add(0,goalID);
  //print(goalID, " ");
  while (prevNode >= 0){
    //print(prevNode," ");
    path.add(0,prevNode);
    prevNode = parent[prevNode];
  }
  //print("\n");
  
  return path;
}

class Node implements Comparable<Node> {
  public Float g;
  public Float h;
  public Float cost;
  public int id;

  public Node(int id, float g, float h) {
    this.id = id;
    this.g = g;
    this.h = h;
    
    this.cost = this.g+this.h;
  }

  public boolean equals(Object o) {
    if (o instanceof Node) {
      Node toCompare = (Node) o;
      return (this.id==toCompare.id);
    }
    return false;
  }

  @Override
  public int compareTo(Node n2) {
    return this.cost.compareTo(n2.cost);
  }
}

 public float heuristic1(int currNode, int goalNode, Vec2[] nodePos) {
  return nodePos[currNode].distanceTo(nodePos[goalNode]);
}

 public ArrayList<Integer> runAStar(Vec2[] nodePos, int numNodes, int startID, int goalID) {
  PriorityQueue<Node> closed = new PriorityQueue<Node>(numNodes);
  PriorityQueue<Node> fringe = new PriorityQueue<Node>(numNodes);
  ArrayList<Integer> path = new ArrayList();

  if (startID == -1 || goalID == -1) {
    path.add(0, -1);
    return path;
  }

  if (startID == goalID) {
    path.add(0, startID);
    return path;
  }

  for (int i = 0; i < numNodes; i++) { //Clear visit tags and parent pointers
    parent[i] = -1; //No parent yet
  }

  //println("\nBeginning Search");
  
  fringe.offer(new Node(startID, 0, heuristic1(startID, goalID, nodePos)));
  while (fringe.size() > 0){
    Node currentNode = fringe.poll();
    if (currentNode.id == goalID){
      break;
    }
    
    for (int i = 0; i < neighbors[currentNode.id].size(); i++){
      int neighborNodeID = neighbors[currentNode.id].get(i);
      Node neighbor = new Node(
        neighborNodeID, 
        currentNode.g + nodePos[currentNode.id].distanceTo(nodePos[neighborNodeID]),
        heuristic1(neighborNodeID, goalID, nodePos)
      );

      if (fringe.contains(neighbor)) {
        boolean cont = false;
        for (Node n : fringe) {
          if (n.g <= neighbor.g && n.equals(neighbor)) {
            cont = true;
            break;
          }
        }
        if (cont) {
          continue;
        }
      } else if (closed.contains(neighbor)) {
        boolean cont = false;
        for (Node n : closed) {
          if (n.g <= neighbor.g && n.equals(neighbor)) {
            cont = true;
            break;
          }
          else if (n.equals(neighbor)) {
            closed.remove(n);
            fringe.offer(n);
          }
        }
        if (cont) {
          continue;
        }
      } else {
        fringe.offer(neighbor);
      }
      parent[neighbor.id] = currentNode.id;
    } 
    closed.offer(currentNode);
  }

  if (fringe.size() == 0){
    //println("No Path");
    path.add(0,-1);
    return path;
  }
    
  //print("\nReverse path: ");
  int prevNode = parent[goalID];
  path.add(0,goalID);
  // print(goalID, " ");
  while (prevNode >= 0){
    //print(prevNode," ");
    path.add(0,prevNode);
    prevNode = parent[prevNode];
  }
  //print("\n");
  
  return path;
}

// temporary duplicate so as to not lose code
 public ArrayList<Integer> runAStarNew(Vec2[] nodePos, int numNodes, int startID, int goalID) {
  PriorityQueue<Node> fringe = new PriorityQueue<Node>();
  ArrayList<Integer> path = new ArrayList();

  if (startID == -1 || goalID == -1) {
    path.add(0, -1);
    return path;
  }

  if (startID == goalID) {
    path.add(0, startID);
    return path;
  }

  for (int i = 0; i < numNodes; i++) { //Clear visit tags and parent pointers
    parent[i] = -1; //No parent yet
    closed[i] = new PriorityQueue<Float>();
    open[i] = new PriorityQueue<Node>();
  }

  //println("\nBeginning Search");
  
  fringe.offer(new Node(startID, 0, heuristic1(startID, goalID, nodePos)));
  while (fringe.size() > 0){
    Node currentNode = fringe.poll();
    open[currentNode.id].poll();
    if (currentNode.id == goalID){
      break;
    }
    
    for (int i = 0; i < neighbors[currentNode.id].size(); i++){
      int neighborNodeID = neighbors[currentNode.id].get(i);
      Node neighbor = new Node(
        neighborNodeID, 
        currentNode.g + nodePos[currentNode.id].distanceTo(nodePos[neighborNodeID]),
        heuristic1(neighborNodeID, goalID, nodePos)
      );

      if (open[neighbor.id].size() > 0) {
        // if (open[neighbor.id].peek() <= neighbor.g) continue;
        boolean cont = false;
        for (Node n : fringe) {
          if (n.g <= neighbor.g && n.equals(neighbor)) {
            cont = true;
            break;
          }
        }
        if (cont) {
          continue;
        }
      } else if (closed[neighbor.id].size() > 0) {
        if (closed[neighbor.id].peek() <= neighbor.g) continue;
        else {
          Node n = new Node(
            neighbor.id,
            closed[neighbor.id].poll(),
            heuristic1(neighbor.id, goalID, nodePos)
          );
          fringe.offer(n);
          open[neighbor.id].offer(n);
        }
      } else {
        fringe.offer(neighbor);
      }
      parent[neighbor.id] = currentNode.id;
    } 
    closed[currentNode.id].offer(currentNode.g);
  }

  if (fringe.size() == 0){
    //println("No Path");
    path.add(0,-1);
    return path;
  }
    
  //print("\nReverse path: ");
  int prevNode = parent[goalID];
  path.add(0,goalID);
  // print(goalID, " ");
  while (prevNode >= 0){
    //print(prevNode," ");
    path.add(0,prevNode);
    prevNode = parent[prevNode];
  }
  //print("\n");
  
  return path;
}

// // iteratively deepens the dls
// ArrayList<Integer> runIDDFS(ArrayList<Integer>[] graph, int start, int goal) {
//     boolean[] res = new boolean[]{false, false};
//     ArrayList<Integer> path = new ArrayList<Integer>();
//     for (int i = 0; i < numNodes; i++) {
//         // println("Starting Search With Depth " + i);
//         // calls dls with new depth
//         res = dls(path, graph, i, start, goal);
//         // returns if it finds goal or cant keep going
//         if (res[0]) return path;
//         if (!res[0] && !res[1]) break;
//     }
    
//     // no path
//     path.add(0, -1);
//     return path;
// }

// // depth limited search
// boolean[] dls(ArrayList<Integer> path, ArrayList<Integer>[] graph, int depth, int start, int goal) {
//     // base case for if max depth reached or goal found
//     // print("Current Path: \n[");
//     // for (int i = 0; i < path.size()-1; i++) {
//     //     print(path.get(i)); print(", ");
//     // }
//     // if (path.size() > 0) {
//     //     print(path.get(path.size()-1));
//     // }
//     // print("]\n\n");
//     if (depth == 0 || start == goal) {
//         // if goal found, add to the path and return
//         if (start == goal) {
//             path.add(start);
//             return new boolean[]{true, true};
//         // can still keep going maybe so return a different case
//         } else {
//             // not found but maybe children
//             return new boolean[]{false, true};
//         }
//     }

//     // iterate through the children 
//     boolean remaining = false;
//     for (var child : graph[start]) {
//         // add current node to the path
//         path.add(start);
//         // recursively call dls with one less depth
//         boolean[] keep_going = dls(path, graph, depth-1, child, goal);
//         // if you found the goal, cascade back up
//         if (keep_going[0]) {
//             return new boolean[]{true, true};
//         }
//         // remove current node from path because it did not lead to goal
//         path.remove(path.size()-1);
//         // if any of the nodes might have children, have the search keep
//         // going (only for iterative deepening)
//         if (keep_going[1]) remaining = true;
//     }

//     // return the state of the search
//     return new boolean[]{false, remaining};
// }


//Compute collision tests. Code from the in-class exercises may be helpful ehre.

//Returns true if the point is inside a circle
//You must consider a point as colliding if it's distance is <= eps
 public boolean pointInCircle(Vec2 center, float r, Vec2 pointPos, float eps){
  float dist = pointPos.distanceTo(center);
  if (dist < r+eps){ //small safety factor
    return true;
  }
  return false;
}

//Returns true if the point is inside a list of circle
//You must consider a point as colliding if it's distance is <= eps
 public boolean pointInCircleList(Vec2[] centers, float[] radii, int numObstacles, Vec2 pointPos, float eps){
  for (int i = 0; i < numObstacles; i++){
    Vec2 center =  centers[i];
    float r = radii[i];
    if (pointInCircle(center,r,pointPos, eps)){
      return true;
    }
  }
  return false;
}


class hitInfo{
  public boolean hit = false;
  public float t = 9999999;
}

 public hitInfo rayCircleIntersect(Vec2 center, float r, Vec2 l_start, Vec2 l_dir, float max_t){
  hitInfo hit = new hitInfo();
  
  //Step 2: Compute W - a displacement vector pointing from the start of the line segment to the center of the circle
  Vec2 toCircle = center.minus(l_start);
  
  //Step 3: Solve quadratic equation for intersection point (in terms of l_dir and toCircle)
  float a = 1;  //Length of l_dir (we normalized it)
  float b = -2*dot(l_dir,toCircle); //-2*dot(l_dir,toCircle)
  float c = toCircle.lengthSqr() - (r+strokeWidth)*(r+strokeWidth); //different of squared distances
  
  float d = b*b - 4*a*c; //discriminant 
  
  if (d >=0 ){ 
    //If d is positive we know the line is colliding, but we need to check if the collision line within the line segment
    //  ... this means t will be between 0 and the length of the line segment
    float t1 = (-b - sqrt(d))/(2*a); //Optimization: we only need the first collision
    float t2 = (-b + sqrt(d))/(2*a); //Optimization: we only need the first collision
    //println(hit.t,t1,t2);
    if (t1 > 0 && t1 < max_t){
      hit.hit = true;
      hit.t = t1;
    }
    else if (t1 < 0 && t2 > 0){
      hit.hit = true;
      hit.t = -1;
    }
    
  }
    
  return hit;
}

 public hitInfo rayCircleListIntersect(Vec2[] centers, float[] radii,  int numObstacles, Vec2 l_start, Vec2 l_dir, float max_t){
  hitInfo hit = new hitInfo();
  hit.t = max_t;
  for (int i = 0; i < numObstacles; i++){
    Vec2 center = centers[i];
    float r = radii[i];
    
    hitInfo circleHit = rayCircleIntersect(center, r, l_start, l_dir, hit.t);
    if (circleHit.t > 0 && circleHit.t < hit.t){
      hit.hit = true;
      hit.t = circleHit.t;
    }
    else if (circleHit.hit && circleHit.t < 0){
      hit.hit = true;
      hit.t = -1;
    }
  }
  return hit;
}

// Project 1 Part 2
/////////////////////////////

// scene dimensions
float sceneX = 1500;
float sceneY = 1500;
float sceneZ = 1500;

// node stuff
static int numNodes = 100;
static int maxNumNodes = 1000;

// obstacles
ArrayList<Vec3> circleVel = new ArrayList<Vec3>();
ArrayList<Vec3> circlePos = new ArrayList<Vec3>();
ArrayList<Float> circleRad = new ArrayList<Float>();
ArrayList<Vec3> circleColor = new ArrayList<Vec3>();
static int initObstacles = 200;
int numObstacles = initObstacles;

Camera camera;

// useful things
float ninety, oneeighty, twoseventy, threesixty;
float epsilon = 1e-6f;

// drawing info
int strokeWidth = 2;
PImage conkcrete;

// key state variables
boolean moveObjects = false;
boolean mouseCast = false;
Vec3 mouseRay, mouseOrig;

// vertices for drawing floor
Vec3[][] floor = new Vec3[][]{
    {new Vec3(sceneX/2+20,0,sceneZ/2+20),new Vec3(0,0,0)},
    {new Vec3(sceneX/2+20,0,-sceneZ/2-20),new Vec3(0,1,0)},
    {new Vec3(-sceneX/2-20,0,-sceneZ/2-20),new Vec3(1,0,0)},
    {new Vec3(-sceneX/2-20,0,sceneZ/2+20),new Vec3(1,1,0)}
};

 public void setup() {
    /* size commented out by preprocessor */;
    surface.setTitle("CSCI 5611 Project 1 Part 2");
    surface.setResizable(true);
    surface.setLocation(500,500);
    strokeWeight(2);

    camera = new Camera();

    // useful things
    oneeighty = radians(180);
    ninety = radians(90);
    twoseventy = radians(270);
    threesixty = radians(360);

    // image/model loading
    conkcrete = loadImage("data/conkcrete.jpg");

    placeRandomObstacles();
}

 public void placeRandomObstacles(){
  //Initial obstacle position
  circleRad.add(30.0f); //Make the first obstacle big
  circlePos.add(new Vec3(
      random(-sceneX*0.5f,sceneX*0.5f),
      -circleRad.get(0),
      random(-sceneZ*0.5f,sceneZ*0.5f)
  ));
  circleColor.add(new Vec3(
      random(255),
      random(255),
      random(255)
  ));

  for (int i = 1; i < numObstacles; i++){
    circleRad.add((10+40*pow(random(1),3)));
    circlePos.add(new Vec3(
        random(-sceneX*0.5f,sceneX*0.5f),
        -circleRad.get(i),
        random(-sceneZ*0.5f,sceneZ*0.5f)
    ));
    circleColor.add(new Vec3(
        random(255),
        random(255),
        random(255)
    ));
  }
  circleRad.set(0, 30.0f); //Make the first obstacle big
}

 public void reset() {
    
}

 public void update() {
    
}

// draws coordinate system of scene for debugging
 public void drawBounds() {
    // x axis --> red
    stroke(255,0,0);
    line(0,0,0,3000,0,0);
    line(0,0,0,-3000,0,0);
    

    // y axis --> green
    stroke(0,255,0);
    line(0,0,0,0,3000,0);
    line(0,0,0,0,-3000,0);

    // z axis --> blue
    stroke(0,0,255);
    line(0,0,0,0,0,3000);
    line(0,0,0,0,0,-3000);
}

// drawing borders of the scene
 public void drawFloor() {
    fill(11, 43, 20);
    textureMode(NORMAL);
    beginShape();
        texture(conkcrete);
        for (var vertex : floor) {
            vertex(vertex[0].x, vertex[0].y, vertex[0].z, vertex[1].x, vertex[1].y);
        }
    endShape(CLOSE);
}

// draw obstacles :)
 public void drawObstacles() {
    noStroke();
    for (int i = 0; i < numObstacles; i++) {
        Vec3 currPos = circlePos.get(i);
        Vec3 currCol = circleColor.get(i);
        float currRad = circleRad.get(i);
        fill(currCol.x, currCol.y, currCol.z);
        pushMatrix();
            translate(currPos.x, currPos.y, currPos.z);
            sphere(currRad);
        popMatrix();
    }   
    strokeWeight(strokeWidth);
}

// void drawMouseRay() {
//   strokeWeight(3);
//   stroke(0);
//   line(
//     mouseOrig.x, 
//     mouseOrig.y, 
//     mouseOrig.z,
//     mouseOrig.x + mouseRay.x*10000, 
//     mouseOrig.y + mouseRay.y*10000, 
//     mouseOrig.z + mouseRay.z*10000
//   );
//   strokeWeight(strokeWidth);
// }

// main draw loop
 public void draw() {
    background(50);

    // Sets the default ambient 
    // and directional light
    colorMode(HSB, 360, 100, 100);
    lightFalloff(1,0,0);
    lightSpecular(0,0,10);
    ambientLight(0,0,100);
    directionalLight(128,128,128, 0,0,0);
    colorMode(RGB, 255, 255, 255);

    // concentration = map(cos(frameCount * .01), -1, 1, 12, 100);
    // mouse.set(mouseX - half.x, mouseY - half.y, viewOff);
    // mouse.normalize();

    // // Flash light.
    // spotLight(
    //     191, 170, 133,
    //     0, 0, viewOff,
    //     mouse.x, mouse.y, -1,
    //     angle, concentration
    // );

    camera.Update(1.0f/frameRate);

    // used for understanding where the bounds of the scene are
    drawFloor();
    drawBounds();
    drawObstacles();
    // if (mouseCast) {
    //   drawMouseRay();
    // }
    checkPressed();
    update();
}

 public void checkPressed() {

}

 public void mouseWheel(MouseEvent event) {
    
}

 public void mouseReleased() {
  // mouseCast = true;
  // mouseRay = cameraRay(mouseX, mouseY);
  // mouseOrig = new Vec3(camera.position.x, camera.position.y, camera.position.z);
}

 public void keyPressed()
{
  camera.HandleKeyPressed();
  if (key == 'v') {
    moveObjects = !moveObjects;
  }
}

 public void keyReleased()
{
  camera.HandleKeyReleased();
}

// Vec3 cameraRay(float x, float y) {
//   float imageAspectRatio = camera.aspectRatio;  //assuming width > height 
//   float px = (2 * ((x + 0.5) / displayWidth) - 1) * tan(camera.fovy / 2 * PI / 180) * imageAspectRatio; 
//   float py = (1 - 2 * ((y + 0.5) / displayHeight) * tan(camera.fovy / 2 * PI / 180)); 
//   Vec3 rayOrigin = new Vec3(camera.position.x, camera.position.y, camera.position.z); 
//   Vec3 rayDirection = new Vec3(px, py, -1);  //note that this just equal to Vec3f(Px, Py, -1); 
//   rayDirection = rayDirection.normalized();  //it's a direction so don't forget to normalize
//   return rayDirection;
// }
//Vector Library
//CSCI 5611 Vector 2 Library [Example]
// Stephen J. Guy <sjguy@umn.edu>

public class Vec2 {
  public float x, y;
  
  public Vec2(float x, float y){
    this.x = x;
    this.y = y;
  }
  
  public String toString(){
    return "(" + x+ "," + y +")";
  }
  
  public float length(){
    return sqrt(x*x+y*y);
  }
  
  public float lengthSqr(){
    return x*x+y*y;
  }
  
  public Vec2 plus(Vec2 rhs){
    return new Vec2(x+rhs.x, y+rhs.y);
  }
  
  public void add(Vec2 rhs){
    x += rhs.x;
    y += rhs.y;
  }
  
  public Vec2 minus(Vec2 rhs){
    return new Vec2(x-rhs.x, y-rhs.y);
  }
  
  public void subtract(Vec2 rhs){
    x -= rhs.x;
    y -= rhs.y;
  }
  
  public Vec2 times(float rhs){
    return new Vec2(x*rhs, y*rhs);
  }
  
  public void mul(float rhs){
    x *= rhs;
    y *= rhs;
  }
  
  public void clampToLength(float maxL){
    float magnitude = sqrt(x*x + y*y);
    if (magnitude > maxL){
      x *= maxL/magnitude;
      y *= maxL/magnitude;
    }
  }
  
  public void setToLength(float newL){
    float magnitude = sqrt(x*x + y*y);
    x *= newL/magnitude;
    y *= newL/magnitude;
  }
  
  public void normalize(){
    float magnitude = sqrt(x*x + y*y);
    x /= magnitude;
    y /= magnitude;
  }
  
  public Vec2 normalized(){
    float magnitude = sqrt(x*x + y*y);
    return new Vec2(x/magnitude, y/magnitude);
  }
  
  public float distanceTo(Vec2 rhs){
    float dx = rhs.x - x;
    float dy = rhs.y - y;
    return sqrt(dx*dx + dy*dy);
  }
}

 public Vec2 interpolate(Vec2 a, Vec2 b, float t){
  return a.plus((b.minus(a)).times(t));
}

 public float dot(Vec2 a, Vec2 b){
  return a.x*b.x + a.y*b.y;
}

 public Vec2 projAB(Vec2 a, Vec2 b){
  return b.times(a.x*b.x + a.y*b.y);
}
////////////////////////////////////////////////////////////////////////////////

// CSCI 5611 Vector 3 Library
// Noah J Hendrickson <hend0800@umn.edu>

public class Vec3 {
    public float x, y, z;

    public Vec3(float x, float y, float z){
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public String toString(){
        return "(" + x + "," + y + "," + z + ")";
    }

    public float length(){
        return sqrt(x*x+y*y+z*z);
    }

    public float lengthSqr() {
        return x*x+y*y+z*z;
    }

    public Vec3 plus(Vec3 rhs){
        return new Vec3(x+rhs.x, y+rhs.y, z+rhs.z);
    }

    public void add(Vec3 rhs){
        x += rhs.x;
        y += rhs.y;
        z += rhs.z;
    }

    public Vec3 minus(Vec3 rhs){
        return new Vec3(x-rhs.x, y-rhs.y, z-rhs.z);
    }

    public void subtract(Vec3 rhs){
        x -= rhs.x;
        y -= rhs.y;
        z -= rhs.z;
    }

    public Vec3 times(float rhs){
        return new Vec3(x*rhs, y*rhs, z*rhs);
    }

    public void mul(float rhs){
        x *= rhs;
        y *= rhs;
        z *= rhs;
    }

    public void clampToLength(float maxL){
        float magnitude = sqrt(x*x + y*y + z*z);
        if (magnitude > maxL){
            x *= maxL/magnitude;
            y *= maxL/magnitude;
            z *= maxL/magnitude;
        }
    }

    public void setToLength(float newL){
        float magnitude = sqrt(x*x + y*y);
        if (magnitude <= epsilon) return;
        x *= newL/magnitude;
        y *= newL/magnitude;
        z *= newL/magnitude;
    }

    public void normalize(){
        float magnitude = sqrt(x*x + y*y + z*z);
        if (magnitude > epsilon) {
            x /= magnitude;
            y /= magnitude;
            z /= magnitude;
        }
    }

    public Vec3 normalized(){
        float magnitude = sqrt(x*x + y*y + z*z);
        if (magnitude > epsilon) return new Vec3(x/magnitude, y/magnitude, z/magnitude);
        return new Vec3(x,y,z);
    }

    public float distanceTo(Vec3 rhs){
        float dx = rhs.x - x;
        float dy = rhs.y - y;
        float dz = rhs.z - z;
        return sqrt(dx*dx + dy*dy + dz*dz);
    }

    public void rotateAroundZ(float rad) {
        x = cos(rad)*x-sin(rad)*y;
        y = sin(rad)*x+cos(rad)*y;
        z = z;
    }

    public void rotateAroundY(float rad) {
        x = cos(rad)*x+sin(rad)*z;
        y = y;
        z = -sin(rad)*x+cos(rad)*z;
    }

    public void rotateAroundX(float rad) {
        x = x;
        y = cos(rad)*y-sin(rad)*z;
        z = sin(rad)*y+cos(rad)*z;
    }

    public Vec3 rotatedAroundZ(float rad) {
        float newx = cos(rad)*x-sin(rad)*y;
        float newy = sin(rad)*x+cos(rad)*y;
        float newz = z;
        return new Vec3(newx, newy, newz);
    }

    public Vec3 rotatedAroundY(float rad) {
        float newx = cos(rad)*x+sin(rad)*z;
        float newy = y;
        float newz = -sin(rad)*x+cos(rad)*z;
        return new Vec3(newx, newy, newz);
    }

    public Vec3 rotatedAroundX(float rad) {
        float newx = x;
        float newy = cos(rad)*y-sin(rad)*z;
        float newz = sin(rad)*y+cos(rad)*z;
        return new Vec3(newx, newy, newz);
    }
}

 public Vec3 interpolate(Vec3 a, Vec3 b, float t){
  return a.plus((b.minus(a)).times(t));
  // a + ((b-a)*t)
}

 public float interpolate(float a, float b, float t){
  return a + ((b-a)*t);
}

 public float dot(Vec3 a, Vec3 b){
  return a.x*b.x + a.y*b.y + a.z*b.z;
}

 public Vec3 cross(Vec3 a, Vec3 b) {
    float newx = a.y*b.z - a.z*b.y;
    float newy = a.z*b.x - a.x*b.z;
    float newz = a.x*b.y - a.y*b.x;

    return new Vec3(newx, newy, newz);
}

 public Vec3 projAB(Vec3 a, Vec3 b){
  return b.times(a.x*b.x + a.y*b.y + a.z*b.z);
}

 public float rotateTo(Vec3 a, Vec3 b) {
    Vec3 cross = cross(a, b);
    float first = cross.x+cross.y+cross.z;
    return atan2(first, dot(a,b));
}

// for detecting the edges of the area
 public float rayIntersectPlaneTime(Vec3 normal, Vec3 normPoint, Vec3 origin, Vec3 ray) {
    float denom = dot(normal, ray);
    if (denom > epsilon) {
        Vec3 pl = normPoint.minus(origin);
        float t = dot(pl, normal) / denom;
        if (t >= 0) return t;
        return Float.NaN;
    }
    return Float.NaN;
}

// for detecting collisions between other keewers
 public float rayIntersectSphereTime(Vec3 center, float radius, Vec3 origin, Vec3 ray) {
    Vec3 toCircle = center.minus(origin);

    float a = ray.length()*ray.length(); // square the length of the ray
    float b = -2*dot(ray, toCircle); // 2*dot between ray and dir from pos to center of circle
    float c = toCircle.lengthSqr() - (radius*radius); // difference of squares

    float d = b*b - 4*a*c; // discriminant

    if (d >= 0) {
        float t = (-b-sqrt(d))/(2*a); // only need first intersection
        if (t >= 0) return t; // only return if going to collide
        return Float.NaN; 
    }
    return Float.NaN; // no colliding
}


  public void settings() { size(1200, 1200, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "camera" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
